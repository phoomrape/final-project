import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Alert,
  RefreshControl,
  SafeAreaView,
  ActivityIndicator,
  ScrollView,
  Platform,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import ApiService from '../services/ApiService';

const CategoriesScreen = ({ navigation }) => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const fetchCategories = useCallback(async () => {
    try {
      console.log('üîÑ Starting to fetch categories...');
      setLoading(true);
      const data = await ApiService.getCategories();
      console.log('üì¶ Data received from API:', data);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
      if (Array.isArray(data)) {
        const validCategories = data.filter(item => 
          item && typeof item === 'object' && (item.id !== undefined || item._id !== undefined)
        ).map(item => ({
          ...item,
          id: item.id || item._id // ‡πÉ‡∏ä‡πâ id ‡∏´‡∏£‡∏∑‡∏≠ _id ‡πÄ‡∏õ‡πá‡∏ô fallback
        }));
        console.log('‚úÖ Valid categories:', validCategories);
        console.log('üìä Categories count:', validCategories.length);
        console.log('üéØ Total FlatList items:', validCategories.length + 1); // +1 for header
        setCategories(validCategories);
      } else {
        console.warn('‚ö†Ô∏è Data received is not an array:', data);
        setCategories([]);
      }
    } catch (error) {
      console.error('‚ùå Error fetching categories:', error);
      setCategories([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      Alert.alert(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ',
        [{ text: '‡∏ï‡∏Å‡∏•‡∏á' }]
      );
    } finally {
      setLoading(false);
    }
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô refresh
  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await fetchCategories();
    setRefreshing(false);
  }, [fetchCategories]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const handleDeleteCategory = useCallback((categoryId, categoryName) => {
    console.log('üóëÔ∏è Delete button pressed:', { categoryId, categoryName, type: typeof categoryId });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    if (!categoryId || categoryId === 'unknown') {
      Alert.alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
      return;
    }
    
    Alert.alert(
      '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
      `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${categoryName}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\nID: ${categoryId}`,
      [
        {
          text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          style: 'cancel',
        },
        {
          text: '‡∏•‡∏ö',
          style: 'destructive',
          onPress: async () => {
            try {
              console.log('üóëÔ∏è Starting delete process for ID:', categoryId);
              const result = await ApiService.deleteCategory(categoryId);
              console.log('üóëÔ∏è Delete result:', result);
              
              Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', [
                {
                  text: '‡∏ï‡∏Å‡∏•‡∏á',
                  onPress: () => {
                    console.log('üîÑ Refreshing categories after delete...');
                    fetchCategories(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  }
                }
              ]);
            } catch (error) {
              console.error('‚ùå Error deleting category:', error);
              Alert.alert(
                '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${error.message}`,
                [{ text: '‡∏ï‡∏Å‡∏•‡∏á' }]
              );
            }
          },
        },
      ]
    );
  }, [fetchCategories]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const handleEditCategory = useCallback((category) => {
    navigation.navigate('UpdateCategory', { category });
  }, [navigation]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const handleAddCategory = useCallback(() => {
    navigation.navigate('AddCategory');
  }, [navigation]);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
  useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      fetchCategories();
    });

    return unsubscribe;
  }, [navigation, fetchCategories]);

  // Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const CategoryCard = ({ item }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á
    if (!item) return null;
    
    const categoryId = item.id || item._id || 'unknown';
    const categoryName = item.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠';
    const categoryDescription = item.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢';
    
    console.log('üìã CategoryCard data:', { 
      itemId: item.id, 
      item_id: item._id, 
      categoryId, 
      categoryName 
    });
    
    return (
      <View style={styles.categoryCard}>
        <LinearGradient
          colors={['#FFFFFF', '#F8FAFC']}
          style={styles.cardGradient}
        >
          <View style={styles.cardHeader}>
            <View style={styles.categoryInfo}>
              <Text style={styles.categoryName}>{categoryName}</Text>
              <Text style={styles.categoryDescription}>{categoryDescription}</Text>
            </View>
            <View style={styles.categoryId}>
              <Text style={styles.idText}>#{categoryId}</Text>
            </View>
          </View>
          
          <View style={styles.cardActions}>
            <TouchableOpacity
              style={[styles.actionButton, styles.editButton]}
              onPress={() => handleEditCategory(item)}
              disabled={!categoryId || categoryId === 'unknown'}
              accessible={true}
              accessibilityLabel={`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${categoryName}`}
              accessibilityRole="button"
              importantForAccessibility="yes"
            >
              <Text style={styles.editButtonText}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={[styles.actionButton, styles.deleteButton]}
              onPress={() => handleDeleteCategory(categoryId, categoryName)}
              disabled={!categoryId || categoryId === 'unknown'}
              accessible={true}
              accessibilityLabel={`‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${categoryName}`}
              accessibilityRole="button"
              importantForAccessibility="yes"
            >
              <Text style={styles.deleteButtonText}>üóëÔ∏è ‡∏•‡∏ö</Text>
            </TouchableOpacity>
          </View>
        </LinearGradient>
      </View>
    );
  };

  // Web-specific wrapper component
  const WebScrollWrapper = Platform.OS === 'web' ? 'div' : View;
  const webScrollStyles = Platform.OS === 'web' ? {
    height: '100vh',
    overflowY: 'auto',
    overflowX: 'hidden',
    WebkitOverflowScrolling: 'touch',
  } : {};

  if (loading && !refreshing) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#4F46E5" />
        <Text style={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</Text>
      </View>
    );
  }

  const content = (
    <>
      {/* Header */}
      <LinearGradient
        colors={['#4F46E5', '#7C3AED']}
        style={styles.header}
      >
        <Text style={styles.headerTitle}>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Text>
        <Text style={styles.headerSubtitle}>
          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {categories.length} ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        </Text>
      </LinearGradient>

      {/* Add Button */}
      <View style={styles.addButtonContainer}>
        <TouchableOpacity
          style={styles.addButton}
          onPress={handleAddCategory}
          accessible={true}
          accessibilityLabel="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà"
          accessibilityRole="button"
          importantForAccessibility="yes"
        >
          <LinearGradient
            colors={['#10B981', '#059669']}
            style={styles.addButtonGradient}
          >
            <Text style={styles.addButtonText}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà</Text>
          </LinearGradient>
        </TouchableOpacity>
      </View>

      {categories.length > 0 && (
        <Text style={styles.categoryCountText}>
          üìã ‡πÅ‡∏™‡∏î‡∏á {categories.length} ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        </Text>
      )}

      {/* Categories List */}
      {categories.length === 0 && !loading ? (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyIcon}>üì¶</Text>
          <Text style={styles.emptyTitle}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Text>
          <Text style={styles.emptySubtitle}>
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
          </Text>
        </View>
      ) : (
        categories.map((item, index) => (
          <CategoryCard key={item.id || index} item={item} />
        ))
      )}

      {/* Footer */}
      {categories.length > 0 && (
        <View style={styles.footerContainer}>
          <Text style={styles.footerText}>
            üîΩ ‡∏à‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà üîΩ
          </Text>
        </View>
      )}
    </>
  );

  return (
    <SafeAreaView style={styles.container}>
      {Platform.OS === 'web' ? (
        <WebScrollWrapper style={webScrollStyles}>
          {content}
        </WebScrollWrapper>
      ) : (
        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContainer}
          showsVerticalScrollIndicator={true}
          bounces={true}
          scrollEnabled={true}
          refreshControl={
            <RefreshControl
              refreshing={refreshing}
              onRefresh={onRefresh}
              colors={['#4F46E5']}
              tintColor="#4F46E5"
              title="‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà..."
              titleColor="#4F46E5"
            />
          }
        >
          {content}
        </ScrollView>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
    ...(Platform.OS === 'web' && {
      height: '100vh',
      overflow: 'hidden',
    }),
  },
  scrollView: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  webScrollView: {
    height: '100%',
    overflowY: 'auto',
    overflowX: 'hidden',
  },
  scrollContainer: {
    paddingBottom: 20,
  },
  webScrollContainer: {
    minHeight: '100%',
    paddingBottom: 50,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F8FAFC',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#64748B',
  },
  header: {
    padding: 20,
    paddingBottom: 30,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 5,
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#E2E8F0',
  },
  mainScrollView: {
    flex: 1,
  },
  mainScrollContainer: {
    flexGrow: 1,
    paddingBottom: 50,
  },
  categoryCountText: {
    fontSize: 16,
    color: '#666',
    marginBottom: 10,
    textAlign: 'center',
    paddingHorizontal: 20,
  },
  footerContainer: {
    height: 80,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20,
    marginTop: 20,
  },
  footerText: {
    textAlign: 'center',
    color: '#999',
    fontSize: 14,
  },
  addButtonContainer: {
    padding: 20,
    paddingBottom: 10,
  },
  addButton: {
    borderRadius: 12,
    elevation: 3,
    // Web shadow (‡πÉ‡∏´‡∏°‡πà)
    boxShadow: '0px 2px 3.84px rgba(0, 0, 0, 0.25)',
    // iOS shadow (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  addButtonGradient: {
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 12,
    alignItems: 'center',
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  listWrapper: {
    flex: 1,
  },
  flatListStyle: {
    flex: 1,
  },
  scrollViewStyle: {
    flex: 1,
  },
  scrollContentContainer: {
    padding: 20,
    paddingTop: 10,
    paddingBottom: 100,
    flexGrow: 1,
  },
  mainScrollView: {
    flex: 1,
  },
  mainScrollContainer: {
    flexGrow: 1,
    paddingBottom: 50,
  },
  categoriesContainer: {
    padding: 20,
    paddingTop: 10,
  },
  listContainer: {
    padding: 20,
    paddingTop: 10,
    paddingBottom: 100, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
  },
  categoryCard: {
    marginHorizontal: 20,
    marginBottom: 15,
    borderRadius: 15,
    elevation: 3,
    // Web shadow (‡πÉ‡∏´‡∏°‡πà)
    boxShadow: '0px 2px 3.84px rgba(0, 0, 0, 0.1)',
    // iOS shadow (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    minHeight: 140, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    backgroundColor: '#fff',
  },
  cardGradient: {
    borderRadius: 15,
    padding: 20,
    borderWidth: 1,
    borderColor: '#E2E8F0',
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 15,
  },
  categoryInfo: {
    flex: 1,
    marginRight: 10,
  },
  categoryName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1E293B',
    marginBottom: 5,
  },
  categoryDescription: {
    fontSize: 14,
    color: '#64748B',
    lineHeight: 20,
  },
  categoryId: {
    backgroundColor: '#EEF2FF',
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 8,
  },
  idText: {
    fontSize: 12,
    color: '#4F46E5',
    fontWeight: 'bold',
  },
  cardActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  actionButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 15,
    borderRadius: 10,
    alignItems: 'center',
    marginHorizontal: 5,
  },
  editButton: {
    backgroundColor: '#3B82F6',
  },
  deleteButton: {
    backgroundColor: '#EF4444',
  },
  editButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: 'bold',
  },
  deleteButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: 'bold',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 40,
  },
  emptyIcon: {
    fontSize: 64,
    marginBottom: 20,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1E293B',
    marginBottom: 10,
    textAlign: 'center',
  },
  emptySubtitle: {
    fontSize: 16,
    color: '#64748B',
    textAlign: 'center',
    lineHeight: 22,
  },
});

export default CategoriesScreen;
